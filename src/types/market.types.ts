// Market system types for Knova prediction markets
// Matches Supabase schema and consolidates existing market types

import { UserProfile, MarketCategory } from './user.types';

// Market categories - imported from user.types and re-exported for compatibility
export type { MarketCategory };
export type MarketCategoryFilter = MarketCategory | 'all';

// Market status lifecycle (matches enum in Supabase)
export type MarketStatus = 'draft' | 'pending_approval' | 'active' | 'paused' | 'closed' | 'resolved' | 'cancelled';

// Outcome types (matches enum in Supabase)
export type OutcomeType = 'binary' | 'multiple' | 'scalar';

// Market option/outcome (stored as JSONB in markets.options)
export interface MarketOption {
  id: string;
  title: string;
  description?: string | null;
  imageUrl?: string | null;
  orderIndex: number;
  
  // Computed fields (not stored in DB - calculated at runtime)
  odds?: number | null;
  percentage?: number | null;
  currentStake?: number | null;
}

// Market option input for creation (no computed fields)
export interface MarketOptionInput {
  title: string;
  description?: string | null;
  imageUrl?: string | null;
  // Note: id and orderIndex will be generated by system
}

// âœ… Main Market type (matches Supabase schema exactly)
export interface Market {
  id: string;                    // UUID primary key
  title: string;
  description: string;
  category: MarketCategory;
  customCategory?: string | null; // custom_category in DB - For user_generated markets
  outcomeType: OutcomeType;      // outcome_type in DB
  options: MarketOption[];       // Stored as JSONB in DB
  
  // Market configuration
  minStake: number;              // min_stake in DB - Will be bigint for contracts
  maxStake?: number | null;      // max_stake in DB - Will be bigint for contracts
  totalPool: number;             // total_pool in DB - Will be bigint for contracts
  
  // Timing
  startTime: Date;               // start_time in DB
  endTime: Date;                 // end_time in DB
  resolutionTime?: Date | null;  // resolution_time in DB
  
  // Status & resolution
  status: MarketStatus;
  resolvedOutcome?: string | null; // resolved_outcome in DB
  resolutionCriteria: string;    // resolution_criteria in DB
  
  // Creator (for user-generated markets)
  createdBy?: string | null;     // created_by in DB - User ID
  creator?: UserProfile | null;  // Populated via join (not stored in DB)
  
  // Oracle data
  oracleSource?: string | null;  // oracle_source in DB - 'sportradar' | 'manual' | etc.
  oracleId?: string | null;      // oracle_id in DB
  
  // Metadata
  imageUrl?: string | null;      // image_url in DB
  tags: string[];                // tags in DB - Array of tags
  
  // Statistics
  participantCount: number;      // participant_count in DB
  viewCount: number;             // view_count in DB
  
  // Recent participants (computed - not stored in DB)
  recentParticipants?: UserProfile[];
  
  // Timestamps
  createdAt: Date;               // created_at in DB
  updatedAt: Date;               // updated_at in DB
}

// Market creation request
export interface CreateMarketRequest {
  title: string;
  description: string;
  category: MarketCategory;
  customCategory?: string | null;
  options: MarketOptionInput[];
  endDate: Date;
  resolutionCriteria: string;
  tags?: string[];
  imageUrl?: string | null;
  minStake?: number;
  maxStake?: number;
}

// Market filters and pagination
export interface MarketFilters {
  category?: MarketCategory | null;
  status?: MarketStatus | null;
  createdBy?: string | null;
  search?: string | null;
  tags?: string[] | null;
  timeframe?: 'ending_soon' | 'new' | 'popular' | null;
}

export type MarketSortBy = 'created_at' | 'end_date' | 'total_pool' | 'participant_count' | 'title';
export type SortOrder = 'asc' | 'desc';

export interface MarketSort {
  sortBy: MarketSortBy;
  order: SortOrder;
}

export interface MarketsResponse {
  markets: Market[];
  totalCount: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
  currentPage: number;
  totalPages: number;
}

// User-market interactions (stored in user_markets table)
export interface UserMarket {
  id: string;
  userId: string;               // user_id in DB
  marketId: string;             // market_id in DB
  isFavorite: boolean;          // is_favorite in DB
  viewCount: number;            // view_count in DB
  lastViewed?: Date | null;     // last_viewed in DB
  createdAt: Date;              // created_at in DB
  updatedAt: Date;              // updated_at in DB
}

// Market analytics data (computed/aggregated)
export interface MarketAnalytics {
  marketId: string;
  views: { date: string; count: number }[];
  participants: { date: string; count: number }[];
  volume: { date: string; amount: number }[];
  outcomeDistribution: { outcome: string; percentage: number }[];
}

// Database join types
export interface MarketWithCreator extends Market {
  creator: UserProfile;
}

// Legacy compatibility types (keep existing interface names)
// These maintain backwards compatibility with existing components

// Market creation states are now in ui.types.ts

// User's market statistics for creator dashboard
export interface CreatorStats {
  totalMarkets: number;
  activeMarkets: number;
  resolvedMarkets: number;
  totalVolume: number;
  totalParticipants: number;
  successfulPredictions: number;
} 





// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core User Model
model User {
  id               String    @id @default(cuid())
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  name             String?
  walletAddress    String    @unique @map("wallet_address")
  username         String?   @unique
  displayName      String?   @map("display_name") // Custom prediction market display name (settable in settings)
  profilePictureUrl String?  @map("profile_picture_url")
  
  // World ID & Verification
  worldIdVerified   Boolean @default(false) @map("world_id_verified")
  verificationLevel String? @map("verification_level") // "device" or "orb"
  worldIdNullifier  String? @unique @map("world_id_nullifier")
  verifiedAt        DateTime? @map("verified_at")
  
  // Compliance & Profile
  isProfileComplete Boolean @default(false) @map("is_profile_complete")
  age               Int?
  countryCode       String? @map("country_code") @db.VarChar(2)
  region            String?
  isEligible        Boolean @default(false) @map("is_eligible")
  termsAcceptedAt   DateTime? @map("terms_accepted_at")
  privacyAcceptedAt DateTime? @map("privacy_accepted_at")
  
  // Engagement & Streaks
  currentStreak     Int @default(0) @map("current_streak") // Daily visit streak
  longestStreak     Int @default(0) @map("longest_streak") // Best streak ever
  lastActiveDate    DateTime? @map("last_active_date") // Last day they were active
  totalVisitDays    Int @default(0) @map("total_visit_days") // Total unique days visited
  
  // Preferences & Settings
  preferredCurrency String @default("WLD") @map("preferred_currency") // "WLD", "USD", "ETH", etc.
  darkMode          Boolean @default(false) @map("dark_mode")
  favoriteCategories String[] @default([]) @map("favorite_categories") // ["sports", "politics", "crypto"]
  
  // Privacy Settings
  profileVisibility String @default("public") @map("profile_visibility") // "public", "verified_only", "private"
  showPredictionHistory Boolean @default(true) @map("show_prediction_history")
  showStreak        Boolean @default(true) @map("show_streak")
  allowChallenges   Boolean @default(true) @map("allow_challenges")
  
  // Notification Settings
  notifyFollows     Boolean @default(true) @map("notify_follows")
  notifyChallenges  Boolean @default(true) @map("notify_challenges")
  notifyMarketUpdates Boolean @default(true) @map("notify_market_updates")
  notifyResults     Boolean @default(true) @map("notify_results")
  notifyStreakReminders Boolean @default(true) @map("notify_streak_reminders")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts        Account[]
  sessions        Session[]
  predictions     Prediction[]
  userMarkets     UserMarket[]
  transactions    Transaction[]
  complianceLog   ComplianceLog[]
  // New relations for social features
  following       UserFollow[] @relation("UserFollowing")
  followers       UserFollow[] @relation("UserFollowers")
  challenges      Challenge[] @relation("ChallengeSender")
  receivedChallenges Challenge[] @relation("ChallengeReceiver")
  activities      UserActivity[]
  
  // Market creation relation
  createdMarkets  Market[]

  // Image uploads relation
  uploadedImages  UploadedImage[]

  @@map("users")
}

// User Follow System
model UserFollow {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

// Challenge System
model Challenge {
  id              String   @id @default(cuid())
  senderId        String   @map("sender_id")
  receiverId      String   @map("receiver_id")
  marketId        String   @map("market_id")
  message         String?  // Optional challenge message
  status          String   @default("pending") // "pending", "accepted", "declined", "expired"
  expiresAt       DateTime @map("expires_at")
  
  createdAt       DateTime @default(now()) @map("created_at")
  respondedAt     DateTime? @map("responded_at")

  sender   User   @relation("ChallengeSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User   @relation("ChallengeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("challenges")
}

// User Activity Feed
model UserActivity {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // "prediction", "follow", "challenge", "streak", "achievement"
  title     String   // "Made a prediction on...", "Started following...", etc.
  details   Json?    // Additional activity data
  isPublic  Boolean  @default(true) @map("is_public") // Whether activity shows on public profile
  
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Compliance Tracking
model ComplianceLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String   // "age_verification", "region_check", "terms_acceptance", etc.
  result      String   // "passed", "failed", "pending"
  details     Json?    // Additional compliance data
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("compliance_logs")
}

// Prediction Markets
model Market {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  category     String   // "sports", "politics", "crypto", "entertainment", etc.
  outcomeType  String   @map("outcome_type") // "binary", "categorical", "scalar"
  outcomes     Json     // Array of possible outcomes
  
  // Market Configuration
  minStake     Float    @map("min_stake") @default(1.0)
  maxStake     Float?   @map("max_stake")
  totalPool    Float    @default(0.0) @map("total_pool")
  
  // Timing
  startTime    DateTime @map("start_time")
  endTime      DateTime @map("end_time")
  resolutionTime DateTime? @map("resolution_time")
  
  // Status & Resolution
  status       String   @default("active") // "active", "paused", "closed", "resolved", "cancelled"
  resolvedOutcome String? @map("resolved_outcome")
  
  // Oracle Data
  oracleSource String?  @map("oracle_source") // "sportradar", "manual", etc.
  oracleId     String?  @map("oracle_id")
  
  // Metadata
  imageUrl     String?  @map("image_url")
  tags         String[] @default([])
  
  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  predictions  Prediction[]
  userMarkets  UserMarket[]
  challenges   Challenge[]
  uploadedImages UploadedImage[]

  // Creator relationship for user-generated markets
  createdBy    String?  @map("created_by") // User ID of the creator (null for platform-created markets)
  creator      User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  
  // Resolution criteria for market resolution
  resolutionCriteria String  @map("resolution_criteria") // How the market will be resolved
  
  // Market statistics
  participantCount Int @default(0) @map("participant_count")
  viewCount    Int @default(0) @map("view_count")

  @@map("markets")
}

// User Predictions
model Prediction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  marketId    String   @map("market_id")
  outcome     String   // The predicted outcome
  stake       Float    // Amount staked
  odds        Float    // Odds at time of prediction
  potentialPayout Float @map("potential_payout")
  
  // Status
  status      String   @default("active") // "active", "won", "lost", "refunded"
  payout      Float?   // Actual payout if won
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  market Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("predictions")
}

// User Market Interactions (views, favorites, etc.)
model UserMarket {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  marketId  String   @map("market_id")
  isFavorite Boolean @default(false) @map("is_favorite")
  viewCount Int      @default(0) @map("view_count")
  lastViewed DateTime? @map("last_viewed")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  market Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@unique([userId, marketId])
  @@map("user_markets")
}

// Financial Transactions
model Transaction {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  type          String   // "deposit", "withdrawal", "stake", "payout", "refund"
  amount        Float
  currency      String   @default("WLD") // "WLD", "USDC", "ETH", etc.
  
  // Blockchain Data
  txHash        String?  @unique @map("tx_hash")
  blockNumber   Int?     @map("block_number")
  gasUsed       Float?   @map("gas_used")
  
  // Related Objects
  predictionId  String?  @map("prediction_id")
  marketId      String?  @map("market_id")
  
  // Status
  status        String   @default("pending") // "pending", "confirmed", "failed"
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// Uploaded Images Tracking
model UploadedImage {
id          String   @id @default(cuid())
fileName    String   @map("file_name")
originalName String  @map("original_name")
fileSize    Int      @map("file_size") // Size in bytes
fileType    String   @map("file_type") // MIME type
storagePath String   @unique @map("storage_path") // Path in Supabase storage
publicUrl   String   @map("public_url") // Public access URL
uploadType  String   @map("upload_type") // "market-option", "market-header", "profile", etc.

// Relations
uploadedBy  String   @map("uploaded_by") // User ID
user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

// Associated objects (optional)
marketId    String?  @map("market_id") // If used for a market
market      Market?  @relation(fields: [marketId], references: [id], onDelete: SetNull)

// Metadata
metadata    Json?    // Additional metadata like compression settings, original dimensions, etc.

// Status
isActive    Boolean  @default(true) @map("is_active") // Whether file is still in use
isDeleted   Boolean  @default(false) @map("is_deleted") // Soft delete flag

// Timestamps
createdAt   DateTime @default(now()) @map("created_at")
updatedAt   DateTime @updatedAt @map("updated_at")

@@map("uploaded_images")
}

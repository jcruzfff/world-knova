---
description: 
globs: 
alwaysApply: true
---
# Knova Type System Architecture

**Context**: Knova is a World Mini-App prediction market platform migrating from Prisma to Supabase for unified data and storage management.

## **Core Principles**

- **Supabase-first**: All types designed for direct Supabase PostgreSQL integration
- **Smart contract ready**: Prepare types for future blockchain migration
- **Consistent naming**: Use camelCase for TypeScript, snake_case for database
- **Explicit null handling**: Use `null` instead of `undefined` for optional database fields
- **Type safety**: Leverage TypeScript's strict mode and branded types

## **Database Entity Types**

### **User System Types**
```typescript
// ✅ Main User type (matches Supabase schema)
export interface User {
  id: string;                    // UUID primary key
  email?: string | null;
  emailVerified?: Date | null;
  image?: string | null;
  name?: string | null;
  walletAddress: string;         // Unique wallet address
  username?: string | null;      // Unique username
  displayName?: string | null;   // Custom display name
  profilePictureUrl?: string | null;
  
  // World ID & Verification
  worldIdVerified: boolean;
  verificationLevel?: string | null; // 'device' | 'orb'
  worldIdNullifier?: string | null;  // Unique World ID nullifier
  verifiedAt?: Date | null;
  
  // Profile & Compliance
  isProfileComplete: boolean;
  age?: number | null;
  countryCode?: string | null;   // ISO 2-letter code
  region?: string | null;
  isEligible: boolean;
  termsAcceptedAt?: Date | null;
  privacyAcceptedAt?: Date | null;
  
  // Engagement & Streaks
  currentStreak: number;
  longestStreak: number;
  lastActiveDate?: Date | null;
  totalVisitDays: number;
  
  // Preferences
  preferredCurrency: string;     // 'WLD' | 'USDC' | 'ETH'
  darkMode: boolean;
  favoriteCategories: string[]; // Array of MarketCategory values
  
  // Privacy Settings
  profileVisibility: 'public' | 'verified_only' | 'private';
  showPredictionHistory: boolean;
  showStreak: boolean;
  allowChallenges: boolean;
  
  // Notification Settings
  notifyFollows: boolean;
  notifyChallenges: boolean;
  notifyMarketUpdates: boolean;
  notifyResults: boolean;
  notifyStreakReminders: boolean;
  
  // Timestamps
  createdAt: Date;
  updatedAt: Date;
}

// Subset for public profile display
export interface UserProfile {
  id: string;
  username?: string | null;
  displayName?: string | null;
  profilePictureUrl?: string | null;
  worldIdVerified: boolean;
  currentStreak: number;
  longestStreak: number;
  profileVisibility: string;
  showPredictionHistory: boolean;
  showStreak: boolean;
}

// User creation/update types
export interface CreateUserRequest {
  email?: string;
  walletAddress: string;
  username?: string;
  displayName?: string;
  profilePictureUrl?: string;
  worldIdNullifier?: string;
  verificationLevel?: 'device' | 'orb';
}

export interface UpdateUserRequest {
  username?: string;
  displayName?: string;
  profilePictureUrl?: string;
  age?: number;
  countryCode?: string;
  region?: string;
  preferredCurrency?: string;
  darkMode?: boolean;
  favoriteCategories?: string[];
  profileVisibility?: 'public' | 'verified_only' | 'private';
  showPredictionHistory?: boolean;
  showStreak?: boolean;
  allowChallenges?: boolean;
  notifyFollows?: boolean;
  notifyChallenges?: boolean;
  notifyMarketUpdates?: boolean;
  notifyResults?: boolean;
  notifyStreakReminders?: boolean;
}
```

### **Market System Types**
```typescript
// Market categories
export type MarketCategory = 'sports' | 'crypto' | 'music' | 'user_generated';
export type MarketCategoryFilter = MarketCategory | 'all';

// Market status lifecycle
export type MarketStatus = 'draft' | 'pending_approval' | 'active' | 'paused' | 'closed' | 'resolved' | 'cancelled';

// Outcome types
export type OutcomeType = 'binary' | 'multiple' | 'scalar';

// Market option/outcome
export interface MarketOption {
  id: string;
  title: string;
  description?: string | null;
  imageUrl?: string | null;
  orderIndex: number;
  
  // Computed fields (not stored in DB)
  odds?: number | null;
  percentage?: number | null;
  currentStake?: number | null;
}

// Market option input for creation
export interface MarketOptionInput {
  title: string;
  description?: string | null;
  imageUrl?: string | null;
  // id and orderIndex will be generated
}

// ✅ Main Market type (matches Supabase schema)
export interface Market {
  id: string;                    // UUID primary key
  title: string;
  description: string;
  category: MarketCategory;
  customCategory?: string | null; // For user_generated markets
  outcomeType: OutcomeType;
  options: MarketOption[];       // Stored as JSON in DB
  
  // Market configuration
  minStake: number;              // Will be bigint for contracts
  maxStake?: number | null;      // Will be bigint for contracts
  totalPool: number;             // Will be bigint for contracts
  
  // Timing
  startTime: Date;
  endTime: Date;
  resolutionTime?: Date | null;
  
  // Status & resolution
  status: MarketStatus;
  resolvedOutcome?: string | null;
  resolutionCriteria: string;
  
  // Creator (for user-generated markets)
  createdBy?: string | null;     // User ID
  creator?: UserProfile | null;  // Populated via join
  
  // Oracle data
  oracleSource?: string | null;  // 'sportradar' | 'manual' | etc.
  oracleId?: string | null;
  
  // Metadata
  imageUrl?: string | null;
  tags: string[];
  
  // Statistics
  participantCount: number;
  viewCount: number;
  
  // Recent participants (computed)
  recentParticipants?: UserProfile[];
  
  // Timestamps
  createdAt: Date;
  updatedAt: Date;
}

// Market creation request
export interface CreateMarketRequest {
  title: string;
  description: string;
  category: MarketCategory;
  customCategory?: string | null;
  options: MarketOptionInput[];
  endDate: Date;
  resolutionCriteria: string;
  tags?: string[];
  imageUrl?: string | null;
  minStake?: number;
  maxStake?: number;
}

// Market filters and pagination
export interface MarketFilters {
  category?: MarketCategory | null;
  status?: MarketStatus | null;
  createdBy?: string | null;
  search?: string | null;
  tags?: string[] | null;
  timeframe?: 'ending_soon' | 'new' | 'popular' | null;
}

export type MarketSortBy = 'created_at' | 'end_date' | 'total_pool' | 'participant_count' | 'title';
export type SortOrder = 'asc' | 'desc';

export interface MarketSort {
  sortBy: MarketSortBy;
  order: SortOrder;
}

export interface MarketsResponse {
  markets: Market[];
  totalCount: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
  currentPage: number;
  totalPages: number;
}
```

### **Prediction & Transaction Types**
```typescript
// User prediction
export interface Prediction {
  id: string;
  userId: string;
  marketId: string;
  outcome: string;               // Selected outcome
  stake: number;                 // Amount staked (will be bigint)
  odds: number;                  // Odds at time of prediction
  potentialPayout: number;       // Calculated payout (will be bigint)
  
  status: 'active' | 'won' | 'lost' | 'refunded';
  payout?: number | null;        // Actual payout if won
  
  createdAt: Date;
  updatedAt: Date;
}

// Transaction record
export interface Transaction {
  id: string;
  userId: string;
  type: 'deposit' | 'withdrawal' | 'stake' | 'payout' | 'refund';
  amount: number;                // Will be bigint for contracts
  currency: string;              // 'WLD' | 'USDC' | 'ETH'
  
  // Blockchain data
  txHash?: string | null;
  blockNumber?: number | null;
  gasUsed?: number | null;
  
  // Related objects
  predictionId?: string | null;
  marketId?: string | null;
  
  status: 'pending' | 'confirmed' | 'failed';
  
  createdAt: Date;
  updatedAt: Date;
}
```

### **Social Features Types**
```typescript
// User follow relationship
export interface UserFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: Date;
}

// Challenge system
export interface Challenge {
  id: string;
  senderId: string;
  receiverId: string;
  marketId: string;
  message?: string | null;
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  expiresAt: Date;
  createdAt: Date;
  respondedAt?: Date | null;
}

// User activity feed
export interface UserActivity {
  id: string;
  userId: string;
  type: 'prediction' | 'follow' | 'challenge' | 'streak' | 'achievement';
  title: string;
  details?: Record<string, any> | null; // JSON data
  isPublic: boolean;
  createdAt: Date;
}
```

### **File Upload Types**
```typescript
// Uploaded image tracking
export interface UploadedImage {
  id: string;
  fileName: string;
  originalName: string;
  fileSize: number;              // Size in bytes
  fileType: string;              // MIME type
  storagePath: string;           // Path in Supabase storage
  publicUrl: string;             // Public access URL
  uploadType: 'market-option' | 'market-header' | 'profile' | 'other';
  
  // Relations
  uploadedBy: string;            // User ID
  marketId?: string | null;      // If associated with market
  
  // Metadata
  metadata?: Record<string, any> | null;
  
  // Status
  isActive: boolean;
  isDeleted: boolean;            // Soft delete
  
  createdAt: Date;
  updatedAt: Date;
}

// File upload request
export interface UploadImageRequest {
  file: File;
  uploadType: 'market-option' | 'market-header' | 'profile' | 'other';
  marketId?: string;
}
export interface UploadImageResponse {
  id: string;
  publicUrl: string;
  storagePath: string;
}
```

## **API Response Types**

```typescript
// Generic API response wrapper
export interface ApiResponse<T> {
  success: boolean;
  data?: T | null;
  error?: string | null;
  message?: string | null;
  metadata?: {
    timestamp: Date;
    requestId?: string | null;
  } | null;
}

// Error response
export interface ApiError {
  success: false;
  error: string;
  message?: string;
  code?: string;
  details?: Record<string, any>;
}

// Pagination metadata
export interface PaginationMeta {
  currentPage: number;
  totalPages: number;
  totalCount: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
  limit: number;
}
```

## **Form and UI State Types**

```typescript
// Market creation form state
export interface MarketCreationState {
  step: number;
  totalSteps: number;
  formData: Partial<CreateMarketRequest>;
  isValid: boolean;
  errors: Record<string, string>;
}

// Profile completion state
export interface ProfileCompletionState {
  step: number;
  totalSteps: number;
  formData: Partial<UpdateUserRequest>;
  isValid: boolean;
  errors: Record<string, string>;
}

// Loading states
export interface LoadingState {
  isLoading: boolean;
  error?: string | null;
  lastUpdated?: Date | null;
}

// WebSocket message types
export interface MarketUpdate {
  type: 'market_update';
  marketId: string;
  data: Partial<Market>;
}

export interface PredictionUpdate {
  type: 'prediction_update';
  predictionId: string;
  data: Partial<Prediction>;
}

export type WebSocketMessage = MarketUpdate | PredictionUpdate;
```

## **Database Query Types**

```typescript
// Supabase query builders
export interface UserQuery {
  select?: (keyof User)[];
  where?: Partial<User>;
  orderBy?: { field: keyof User; ascending: boolean };
  limit?: number;
  offset?: number;
}

export interface MarketQuery {
  select?: (keyof Market)[];
  where?: Partial<Market>;
  filters?: MarketFilters;
  sort?: MarketSort;
  limit?: number;
  offset?: number;
  includeCreator?: boolean;
  includeOptions?: boolean;
}

// Database join types
export interface MarketWithCreator extends Market {
  creator: UserProfile;
}

export interface PredictionWithMarket extends Prediction {
  market: Market;
  user: UserProfile;
}
```

## **Validation and Brand Types**

```typescript
// Branded types for IDs
export type UserId = string & { readonly __brand: 'UserId' };
export type MarketId = string & { readonly __brand: 'MarketId' };
export type PredictionId = string & { readonly __brand: 'PredictionId' };
export type WalletAddress = string & { readonly __brand: 'WalletAddress' };

// Type guards
export function isUserId(value: string): value is UserId {
  return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(value);
}

export function isMarketId(value: string): value is MarketId {
  return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(value);
}

export function isWalletAddress(value: string): value is WalletAddress {
  return /^0x[a-fA-F0-9]{40}$/.test(value);
}

// Validation helpers
export function validateMarketCategory(category: string): category is MarketCategory {
  return ['sports', 'crypto', 'music', 'user_generated'].includes(category);
}

export function validateMarketStatus(status: string): status is MarketStatus {
  return ['draft', 'pending_approval', 'active', 'paused', 'closed', 'resolved', 'cancelled'].includes(status);
}
```

## **Migration and Transformation Types**

```typescript
// Prisma to Supabase transformation
export interface PrismaToSupabaseMap {
  user: {
    prismaField: keyof any; // Will be removed
    supabaseField: keyof User;
    transform?: (value: any) => any;
  }[];
  market: {
    prismaField: keyof any; // Will be removed
    supabaseField: keyof Market;
    transform?: (value: any) => any;
  }[];
}

// Data migration tracking
export interface MigrationStatus {
  entity: 'users' | 'markets' | 'predictions' | 'transactions' | 'user_follows' | 'challenges' | 'user_activities' | 'uploaded_images';
  totalRecords: number;
  migratedRecords: number;
  failedRecords: number;
  isComplete: boolean;
  startedAt: Date;
  completedAt?: Date | null;
  errors: string[];
}
```

## **Export Organization**

```typescript
// Re-export all types from index
export * from './user.types';
export * from './market.types';
export * from './prediction.types';
export * from './api.types';
export * from './ui.types';
export * from './validation.types';
```

## **Usage Guidelines**

- **Always import from main types file**: `import { User, Market } from '@/types'`
- **Use branded types for IDs**: Cast to branded types at API boundaries
- **Validate inputs**: Use type guards for runtime validation
- **Handle nulls explicitly**: Database fields that can be null should use `| null`
- **Prepare for smart contracts**: Design numeric fields to work with `bigint`
- **Keep types synchronized**: Update types when database schema changes

## **File Structure**
```
src/types/
├── index.ts           // Main export file
├── user.types.ts      // User-related types
├── market.types.ts    // Market and prediction types
├── api.types.ts       // API request/response types
├── ui.types.ts        // Component and state types
└── validation.types.ts // Type guards and validation
```
